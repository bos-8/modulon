// @file: server/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ROOT
  SYSTEM
  ADMIN
  MODERATOR
  USER
  GUEST
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id                  String              @id @default(uuid())
  name                String?
  username            String?
  email               String              @unique
  emailVerified       DateTime?
  image               String?
  password            String              @db.Text
  isActive            Boolean             @default(true)
  isBlocked           Boolean             @default(false)
  isEmailConfirmed    Boolean             @default(false)
  twoFactorEnabled    Boolean             @default(false)
  failedLoginAttempts Int                 @default(0)
  lastLoginAt         DateTime?
  role                UserRole            @default(USER)
  accounts            Account[]
  sessions            Session[]
  Authenticator       Authenticator[]
  personalData        PersonalData?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  VerificationToken   VerificationToken[]

  @@index([email])
  @@index([isActive, role])
}

model PersonalData {
  id          String    @id @default(uuid())
  userId      String    @unique
  firstName   String?
  middleName  String?
  lastName    String?
  phoneNumber String?
  address     String?
  city        String?
  zipCode     String?
  country     String?
  birthDate   DateTime?
  canUserEdit Boolean   @default(true)
  gender      Gender?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([firstName, lastName])
  @@index([phoneNumber])
}

model Account {
  id                       String   @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  ip           String?
  deviceInfo   String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([ip])
}

enum VerificationTokenType {
  EMAIL_CONFIRMATION
  PASSWORD_RESET
  TWO_FACTOR
}

model VerificationToken {
  id         String                @id @default(uuid())
  userId     String
  user       User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       VerificationTokenType
  identifier String?
  token      String                @unique
  expires    DateTime
  createdAt  DateTime              @default(now())

  @@index([userId, type])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// EOF
